exit
Socket.ip_address_list.detect do |intf|
      intf.ipv4? && !intf.ipv4_loopback? && !intf.ipv4_multicast?
    end&.ip_address
local_ip
exit
 @error_type
exit
" executed #{@error_type}. Output: #{output}"
exit
sxs
exit
" executed #{@error_type}. Output: #{output}"
exit
TROUBLESHOOTING_STEPS[error_type]
exit
params[:error_type_search]
params
c
20~params[:troubleshoot][:error_type]~~a[tolht[errtp][1
pmtolht:r_y]20~[00params[:troubleshoot][:ype][1~
exit
stats
 compare_stats(stats, yesterday_stats)
 calculate_stats(yesterday_sites)
exit
compare_stats(stats, yesterday_stats)
 yesterday_sites
 calculate_stats(yesterday_sites)
calculate_stats(yesterday_sites)
exit
calculate_stats(yesterday_sites)
exit
calculate_stats(yesterday_sites)
yesterday_stats
compare_stats(stats, yesterday_stats)
calculate_stats(yesterday_sites)
yesterday_sites.is_a?(Array)
exit
stats[:comparison]
exit
stats[:comparison]
exit
stats[:last_seen][:regions]
stats
 SyncStatsCache.where(name: 'last_seen_and_last_sync')
      .where('created_at < ?', Time.now.beginning_of_day)
      .order(created_at: :desc).first
SyncStatsCache.where(name: 'last_seen_and_last_sync', created_at: range).order(created_at: :desc).first
exit
stats
exit
 @report_url 
exit
continueall
continue
error.location_name
error
error[:location_name]
error[:location_name]]
error
error.location_name
sync_errors
error
exit
sorted_last_seen
continue
    sorted_last_seen
 sorted_activity 
continue
sites.select { |entry| entry["activated"] == 1 }
sites.select { |entry| entry[:activated] == 1 }
sites
continue
sites
exit
sites.select { |entry| entry[:activated] == 1 }
sites.select { |entry| entry["activated"] == 1 }
sites
continue
total_sites
continue
sites
exit
sites
total_sites
continue
total_sites
exit
continueall
continue
site['district_name']
continue
site['days_since_last_seen'].to_i > 3
site['days_since_last_activity'].to_i > 3  && site['days_since_last_seen'].to_i < 3
site['district_name']
site['district_id']
continue
exit
sites.each 
sites.is_a?(Array)
 sites.select { |entry| entry["activated"] == 1 }
sites
continue
exit
sites
continue
 calculate_stats(yesterday_sites)
yesterday_sites.is_a?(Array)
 yesterday_sites.is_a?(Hash) && yesterday_sites[:last_seen] && yesterday_sites[:last_seen][:districts]
 yesterday_sites
exit
yesterday_data
 yesterday_seen 
exit
 yesterday_data
  yesterday_seen
continue
exit
yesterday_data
exit
yesterday_data
yesterday_data.last
yesterday_data.first
yesterday_data.first["last_seen"]
yesterday_data.first["district_id"]
yesterday_data.first[:district_id]
yesterday_data.first
yesterday_data
yesterday_data["0"]["last_seen"]
yesterday_data[0]["last_seen"]
yesterday_data[0][:last_seen]
yesterday_data
yesterday_data["last_seen"]
yesterday_data[:last_seen]
yesterday_data = JSON.parse(yesterday_cache.value)
 yesterday_cache.value[:last_seen]
 yesterday_cache.value
 yesterday_cache 
 yesterday_data
 yesterday_data["last_seen"]
 yesterday_data[:last_seen]
 yesterday_data[:last_seen][:districts].index_by { |d| d[:district_id] } 
yesterday_data[:last_seen][:districts].index_by { |d| district_id(d) }
yesterday_data = yesterday_data.to_json
yesterday_data.to_json
yesterday_data[:last_seen][:districts].index_by { |d| district_id(d) }
yesterday_data = yesterday_cache.value
yesterday_cache.value
yesterday_cache
yesterday_cache.to_array
yesterday_cache.to_a
 yesterday_data[:last_seen][:districts].index_by { |d| district_id(d) }
 yesterday_data = yesterday_cache.to_json
yesterday_cache.to_json
yesterday_cache
yesterday_cache[:last_seen][:districts].index_by { |d| district_id(d) }
yesterday_cache
exit
puts "YESTERDAY DISTRICTS: #{yesterday_data[:last_seen][:districts].inspect}"
exit
 yesterday_data[:last_seen][:districts].index_by { |d| d[:district_id] } 
today_stats[:last_seen][:districts].index_by { |d| d[:district_id] }
yesterday_data[:last_seen][:districts].index_by { |d| d[:district_id] } 
yesterday_data[:last_seen][:districts].index_by { |d| d[:district_id] }
 yesterday_data
 yesterday_data[
   yesterday_seen
exit
yesterday_districts
  def self.add_comparison_to_districts(today_districts, yesterday_districts, key)
      yest_d = yesterday_districts[district[:district_id]]
district[:district_id]
district
yesterday_districts[district[:district_id]]
yest_count
today_count
continue
conitnue
 stat = SyncStatsCache.where(name: 'last_seen_and_last_sync', created_at: range).order(created_at: :desc).first
Time.zone.today.beginning_of_day
Time.zone.today.end_of_day
continue
last_seen
exit
last_seen
continue
exit
result[:comparison]
result[:last_seen][:comparison]
exit
 @last_seen_data
 @last_seen_data[:comparison] 
continue
result
exit
districts
sync_errors
exit
districts.each do |id, info|  puts "#{info[:name]} (#{info[:sites_with_errors]} out of #{info[:total_sites] sites)" end
districts.each do |id, info|
  puts "#{info[:name]} (#{info[:sites_with_errors]} out of #{info[:total_sites]} sites)"
end
exit
sync_errrors
districts
sync_errors
continue
 sync_errors 
continue
request.headers[:Authorization]
request.headers
exit
request.headers
request.headers[:Authorization]
exit
result
exit
 base_url
exit
request.host
continue
 LowNpidNotificationMailer.low_npid_summary(result).deliver_later
result[:districts].present?
result[:districts].any?
result[:districts].any
result[:districts]
continue
result[:total_sites]
exit
result[:total_sites]
result[:last_seen]
result[:last_activity][:districts].any?
result[:last_activity]
result[:last_activity
continue
html
exit
sites.count
sorted_districts
  sorted_districts 
exit
Rails.application.routes.default_url_options[:host]
host
continue
html
continue
 @admin_list
  @mailing_list
continue
@last_seen_data
exit
@last_seen_data
last_seen_data
continue
exit
